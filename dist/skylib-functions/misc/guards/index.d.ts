import * as utils from "../../../utils";
export declare const guards: utils.PrefixKeys<{
    "array-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "array-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "boolean-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "boolean-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "callable-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "callable-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "enumeration-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "false-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "indexedObject-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "indexedObject-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "instanceOf-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "map-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "not-empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "not-empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "null-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "null-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "numStr-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "numStr-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "number-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "number-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "object-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "set-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "string-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "string-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "symbol-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "symbol-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "true-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "tuple-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "undefined-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    "undefined-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "guards/">;
//# sourceMappingURL=index.d.ts.map