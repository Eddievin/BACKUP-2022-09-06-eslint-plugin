export declare const guards: {
    readonly "array-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "boolean-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "boolean-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "callable-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "callable-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "enumeration-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "false-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "indexedObject-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "indexedObject-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "instanceOf-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "map-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "not-empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "not-empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "null-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "null-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "numStr-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "numStr-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "number-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "number-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "set-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "string-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "string-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "symbol-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "symbol-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "true-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "tuple-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "undefined-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "undefined-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../typescript/core/no-restricted-syntax").MessageId, [Partial<import("../../typescript/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
};
//# sourceMappingURL=index.d.ts.map