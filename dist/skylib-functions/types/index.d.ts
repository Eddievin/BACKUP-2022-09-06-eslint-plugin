export declare const types: {
    readonly "no-Writable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-ts-toolbelt": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-IndexedObject": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-IndexedRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-NumStr": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-PartialRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-WritableIndexedObject": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-WritableRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-undefined-shorthand-literal": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-undefined-shorthand-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-undefined-shorthand-typeName": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../../misc/core/no-restricted-syntax").MessageId, [Partial<import("../../misc/core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
};
//# sourceMappingURL=index.d.ts.map