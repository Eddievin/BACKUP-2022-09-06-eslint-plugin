import * as utils from "./utils";
export { misc } from "./misc";
export declare const eslintrc: utils.PrefixKeys<{
    readonly "sort-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, [Partial<import("./misc/core/sort-array").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-suboptions": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, [Partial<import("./misc/core/sort-array").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "eslintrc/">;
export declare const jest: utils.PrefixKeys<{
    readonly "no-toThrow-literal": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-toBe": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-toStrictEqual": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "jest/">;
export declare const typescript: utils.PrefixKeys<{
    readonly "consistent-array-type-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-complex-declarator-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-complex-return-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-distributed-function-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-this-void": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-true-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unsafe-object-assign": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-ReadonlyMap": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-ReadonlySet": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-array-type-alias": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-enum": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-readonly-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-readonly-property": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-prop-type-annotation": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array-callback-return-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/array-callback-return-type").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "exhaustive-switch": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/exhaustive-switch").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-inferrable-types": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-inferrable-types").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-multi-type-tuples": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-multi-type-tuples").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unsafe-object-assignment": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/no-unsafe-object-assignment").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "restrict-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "typescript/">;
export declare const vue: utils.PrefixKeys<{
    readonly "component-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/match-filename").MessageId, [Partial<import("./misc/core/match-filename").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-complex-return-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-empty-lines": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "element-contents-spacing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./vue/core/element-contents-spacing").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "vue/">;
export declare const skylibConfig: utils.PrefixKeys<{
    readonly "eslintrc-no-disable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "eslintrc-no-overrides": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "eslintrc-no-rules": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly prettier: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-commitlint": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, [Partial<import("./misc/core/sort-array").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-eslintrc-synonyms": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./utils/sort.internal").MessageId | import("./misc/core/sort-array").MessageId, [Partial<import("./misc/core/sort-array").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "config/">;
export declare const skylibFacades: utils.PrefixKeys<{
    readonly "prefer-uniqueId-facade": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "facades/">;
export declare const skylibFunctions: utils.PrefixKeys<{
    readonly "types/no-Writable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/no-ts-toolbelt": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-IndexedObject": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-IndexedRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-NumStr": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-PartialRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-WritableIndexedObject": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-WritableRecord": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-undefined-shorthand-literal": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-undefined-shorthand-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "types/prefer-undefined-shorthand-typeName": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "test-utils/prefer-mockCallsToBe": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "reflect/no-get": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "reflect/no-set": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "reflect/prefer-reflect": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "program-flow/prefer-clearInterval": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "program-flow/prefer-clearTimeout": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "program-flow/prefer-setInterval": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "program-flow/prefer-setTimeout": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/no-unfreeze": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/prefer-assign": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/prefer-clone": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/prefer-defineProperty": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/prefer-entries": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/prefer-getPrototypeOf": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/prefer-hasOwnProp": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/prefer-keys": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object/prefer-values": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "json/prefer-json": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/array-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/array-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/boolean-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/boolean-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/callable-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/callable-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/enumeration-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/false-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/indexedObject-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/indexedObject-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/instanceOf-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/map-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/not-empty-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/not-empty-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/null-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/null-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/numStr-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/numStr-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/number-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/number-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/object-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/object-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/set-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/string-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/string-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/symbol-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/symbol-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/true-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/tuple-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/undefined-always-false": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "guards/undefined-always-true": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "cast/prefer-number": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "cast/prefer-string": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/mixedFrom-include-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/mixedFrom-include-non-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/prefer-first": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/prefer-fromIterable": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/prefer-reverse": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/prefer-second": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/prefer-sort": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/prefer-third": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array/prefer-truncate": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./typescript/core/restrict-syntax").MessageId, [Partial<import("./typescript/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-evaluate-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-ReadonlyMap": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-ReadonlySet": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-defineFn": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-evaluate": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-jsdoc": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/require-jsdoc").MessageId, [Partial<import("./misc/core/require-jsdoc").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-return-in-defineFn": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "functions/">;
export declare const skylibQuasarExtension: utils.PrefixKeys<{
    readonly "test-utils/prefer-findQuasarComponent": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "test-utils/prefer-testComponents": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/no-mixed-classes": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-label-prop": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-lang-var": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-btn": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-card": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-card-actions": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-card-section": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-expansion-item": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-field": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-form": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-input": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-item": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-knob": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-menu": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-option-group": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-popup-proxy": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-select": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-toggle": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/prefer-m-tooltip": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template/sort-v-bind": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "script/consistent-expose-arg": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "script/no-global-icons": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "script/no-global-lang": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "script/require-validateEmit-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "script/require-validateProps-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/check-Props-extends": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/check-Slots-extends": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/no-OwnProps-extends": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/no-OwnSlots-extends": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/no-empty-interfaces": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/prefer-OwnProps": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/prefer-OwnSlots": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/prefer-Props-interface": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "extras/prefer-Slots-interface": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-computed-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-ref-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-ref-undefined": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-prop-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-ref-type-param": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./misc/core/restrict-syntax").MessageId, [Partial<import("./misc/core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
}, "quasar-extension/">;
//# sourceMappingURL=prefixed-rules.d.ts.map