export declare const typescript: {
    readonly "consistent-array-type-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-complex-declarator-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-complex-return-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-distributed-function-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-this-void": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-true-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unsafe-object-assign": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-ReadonlyMap": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-ReadonlySet": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-array-type-alias": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-enum": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-readonly-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-readonly-property": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-prop-type-annotation": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "array-callback-return-type": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/array-callback-return-type").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "exhaustive-switch": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/exhaustive-switch").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-inferrable-types": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-inferrable-types").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-multi-type-tuples": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-multi-type-tuples").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-restricted-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-restricted-syntax").MessageId, [Partial<import("./core/no-restricted-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unsafe-object-assignment": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-unsafe-object-assignment").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
};
//# sourceMappingURL=index.d.ts.map