export declare const misc: {
    readonly "class-match-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/match-filename").MessageId, [Partial<import("./core/match-filename").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-source-extension": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-symbol-description": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "max-identifier-blocks": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-at-sign-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/disallow-import").MessageId, [Partial<import("./core/disallow-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-at-sign-internal-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/disallow-import").MessageId, [Partial<import("./core/disallow-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-chain-coalescence-mixture": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-empty-interfaces": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-index-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/disallow-import").MessageId, [Partial<import("./core/disallow-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-internal-modules": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/disallow-import").MessageId, [Partial<import("./core/disallow-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-language-mixing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-negated-conditions": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-nodejs-modules": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/disallow-import").MessageId, [Partial<import("./core/disallow-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-relative-parent-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/disallow-import").MessageId, [Partial<import("./core/disallow-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-underscore-export": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-as-const": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-break": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-unnecessary-initialization": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-arrow-function-property": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-arrow-static-method": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-const-require": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "restrict-identifier-characters": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-call-signature": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-construct-signature": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "comment-spacing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/comment-spacing").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-empty-lines": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/consistent-empty-lines").MessageId, [object & {
        readonly rules?: readonly Partial<import("./core/consistent-empty-lines").SubOptions & import("../utils").SharedOptions2>[];
    }], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-enum-members": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/consistent-enum-members").MessageId, [Partial<{
        selector: never[];
    }> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/consistent-filename").MessageId, [Partial<import("./core/consistent-filename").Options> & {
        readonly overrides?: readonly Partial<import("./core/consistent-filename").SubOptions & import("../utils").SharedOptions2>[];
    }], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/consistent-import").MessageId, [object & {
        readonly sources?: readonly Partial<import("./core/consistent-import").SubOptions & import("../utils").SharedOptions2>[];
    }], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "consistent-optional-props": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/consistent-optional-props").MessageId, [Partial<import("./core/consistent-optional-props").Options> & {
        readonly overrides?: readonly Partial<import("./core/consistent-optional-props").SubOptions & import("../utils").SharedOptions2>[];
    }], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "disallow-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/disallow-import").MessageId, [Partial<import("./core/disallow-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "export-all-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/export-all-name").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "match-filename": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/match-filename").MessageId, [Partial<import("./core/match-filename").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-expression-empty-lines": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-expression-empty-lines").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-self-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-self-import").MessageId, [Partial<import("./core/no-self-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "no-sibling-import": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/no-sibling-import").MessageId, [Partial<import("./core/no-sibling-import").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "object-format": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/object-format").MessageId, [Partial<import("./core/object-format").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "only-export-name": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/only-export-name").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "prefer-only-export": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/prefer-only-export").MessageId, [Partial<import("./core/prefer-only-export").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-jsdoc": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/require-jsdoc").MessageId, [Partial<import("./core/require-jsdoc").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "require-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/require-syntax").MessageId, [Partial<import("./core/require-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "restrict-syntax": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/restrict-syntax").MessageId, [Partial<import("./core/restrict-syntax").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-array": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId | import("./core/sort-array").MessageId, [Partial<import("./core/sort-array").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-class-members": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId, [Partial<import("./core/sort-class-members").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-keys": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId | import("./core/sort-keys").MessageId, [object & {
        readonly overrides?: readonly Partial<import("./core/sort-keys").SubOptions & import("../utils").SharedOptions2>[];
    }], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "sort-statements": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("../utils/sort.internal").MessageId, [Partial<import("./core/sort-statements").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "switch-case-spacing": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/switch-case-spacing").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly "template-literal-format": import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/template-literal-format").MessageId, [object & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
    readonly wrap: import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<import("./core/wrap").MessageId, [Partial<import("./core/wrap").Options> & {}], import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>;
};
//# sourceMappingURL=index.d.ts.map